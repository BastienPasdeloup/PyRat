' #####################################################################################################################################################
' ######################################################################## INFO #######################################################################
' #####################################################################################################################################################

' This file is a UML diagram of the public part of the PyRat project.
' It is written in PlantUML, a language that allows to write UML diagrams in a simple text format.
' The diagram is generated using the PlantUML extension for Visual Studio Code or using the following command:
' The diagram is generated using the following command: plantuml -tsvg -o ../doc/uml/uml.svg uml.puml

' #####################################################################################################################################################
' ###################################################################### DIAGRAM ######################################################################
' #####################################################################################################################################################

@startuml PyRat
left to right direction

' #####################################################################################################################################################
' ###################################################################### PACKAGES #####################################################################
' #####################################################################################################################################################

package "PyRat" #DDDDFF
{

    class Graph
    {
        {field} + vertices : List[Any] {readOnly}
        {method} + add_vertex (vertex : Any)
        {method} + add_edge (vertex_1 : Any, vertex_2 : Any, weight : float, symmetric : bool)
        {method} + get_neighbors (vertex : Any) : List[Any]
        {method} + get_weight (vertex_1 : Any, vertex_2 : Any) : float
        {method} + as_dict () : Dict[Any, Dict[Any, real]]
    }

    abstract class Maze
    {
        {field} + width : int {readOnly}
        {field} + height : int {readOnly}
        {field} + possible_actions : List[str] {readOnly}
        {method} + i_to_rc (i : int) : Tuple[int, int]
        {method} + rc_to_i (row : int, col : int) : int
        {method} + rc_exists (row : int, col : int) : bool
        {method} + coords_difference (vertex_1 : int, vertex_2 : int) : Tuple[int, int]
    }

    class FixedMaze {}

    class RandomMaze {}

    class RenderingEngine
    {
        {method} + render (players : List[Player], maze : Maze, game_state : GameState)
        {method} + end ()
    }

    class AsciiRenderingEngine
    {
        {method} + render (players : List[Player], maze : Maze, game_state : GameState)
    }

    class PygameRenderingEngine
    {
        {method} + render (players : List[Player], maze : Maze, game_state : GameState)
        {method} + end ()
    }

    abstract class Player
    {
        {field} + name : str {readOnly}
        {field} + skin : str {readOnly}
        {method} + preprocessing (maze : Maze, game_state : GameState)
        {abstract} + turn (maze : Maze, game_state : GameState) : str
        {method} + postprocessing (maze : Maze, game_state : GameState, stats : Dict[str, Any])
    }

    class FixedPlayer
    {
        {method} + turn (maze : Maze, game_state : GameState) : str
    }

    class Game
    {
        {method} + reset ()
        {method} + add_player (player : Player, team : str, location : int)
        {method} + start () : Dict[str, Any]
    }

    class GameState
    {
        {field} + player_locations : Dict[str, int]
        {field} + score_per_player : Dict[str, float]
        {field} + muds : Dict[str, Dict[str, Optional[int]]]
        {field} + teams : Dict[str, List[str]]
        {field} + cheese : List[int]
        {field} + turn : int
        {method} + is_in_mud (name : str) : bool
        {method} + get_score_per_team () : Dict[str, float]
        {method} + game_over () : bool
    }

}

' #####################################################################################################################################################

package "Workspace.players" #FFDDDD
{

    class Random1
    {
        {method} + turn (maze : Maze, game_state : GameState) : str
    }

    class Random2
    {
        {method} + turn (maze : Maze, game_state : GameState) : str
    }

    class Random3
    {
        {field} + visited_cells : List[int]
        {method} + turn (maze : Maze, game_state : GameState) : str
    }

    class Random4
    {
        {field} + visited_cells : List[int]
        {field} + trajectory : List[int]
        {method} + preprocessing (maze : Maze, game_state : GameState)
        {method} + turn (maze : Maze, game_state : GameState) : str
    }

}

' #####################################################################################################################################################

package "Workspace.games" #FFDDDD
{

    class example {}
    hide example circle
    hide example fields
    hide example methods

}

' #####################################################################################################################################################
' ##################################################################### RELATIONS #####################################################################
' #####################################################################################################################################################

' Inheritance
Graph <|-- Maze
Maze <|-- FixedMaze
Maze <|-- RandomMaze
RenderingEngine <|-- AsciiRenderingEngine
RenderingEngine <|-- PygameRenderingEngine
Player <|-- FixedPlayer
Player <|-- Random1
Player <|-- Random2
Player <|-- Random3
Player <|-- Random4

' Composition
Game *--> " 1 \n __initial_game_state" GameState
Game *--> " 1 \n __rendering_engine" RenderingEngine
Game *--> " 1 \n __maze" Maze

' Aggregation
Game o--> " * \n __players" Player

' Usage
example ..> Random1 : "<< Uses >>"
example ..> Random2 : "<< Uses >>"
example ..> Random3 : "<< Uses >>"
example ..> Random4 : "<< Uses >>"
example ..> Game : "<< Uses >>"

' #####################################################################################################################################################
' #####################################################################################################################################################

' Done
@enduml