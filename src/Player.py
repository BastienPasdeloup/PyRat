#####################################################################################################################################################
######################################################################## INFO #######################################################################
#####################################################################################################################################################

"""
    TODO
"""

#####################################################################################################################################################
###################################################################### IMPORTS ######################################################################
#####################################################################################################################################################

# External imports
from typing import *
from typing_extensions import *

#####################################################################################################################################################
##################################################################### ARGUMENTS #####################################################################
#####################################################################################################################################################

# Internal imports
from Maze import *

#####################################################################################################################################################
################################################################## GAME DEFINITION ##################################################################
#####################################################################################################################################################

class Player ():

    """
        TODO
    """

    #############################################################################################################################################
    #                                                                CONSTRUCTOR                                                                #
    #############################################################################################################################################

    def __init__ ( self: Self,
                   name: str,
                   skin: str = "default"
                 ) ->    Self:

        """
            This function is the constructor of the class.
            In:
                * self: Reference to the current object.
                * name: Name of the player.
                * skin: Skin of the player.
            Out:
                * self: Reference to the current object.
        """

        # Inherit from parent class
        super(Player, self).__init__()
        
        # Attributes
        self.name = name
        self.skin = skin

    #############################################################################################################################################
    #                                                               PUBLIC METHODS                                                              #
    #############################################################################################################################################

    def preprocessing ( maze:             Maze,
                        teams:            Dict[str, List[str]],
                        player_locations: Dict[str, int],
                        cheese:           List[int],
                        possible_actions: List[str],
                      ) ->                None:
        
        """
            This function is called once at the beginning of the game.
            It is typically given more time than the turn function, to perform complex computations.
            In:
                * maze:             An object representing the maze in which the player plays.
                * name:             Name of the player controlled by this function.
                * teams:            Recap of the teams of players.
                * player_locations: Locations for all players in the game.
                * cheese:           List of available pieces of cheese in the maze.
                * possible_actions: List of possible actions.
            Out:
                * None.
        """

        # TODO
        pass

    #############################################################################################################################################

    def add_edge ( self:      Self,
                   vertex_1:  Any,
                   vertex_2:  Any,
                   weight:    float = 1.0,
                   symmetric: bool = False
                 ) ->         None:

        """
            Adds a vertex to the graph.
            In:
                * self:      Reference to the current object.
                * vertex_1:  First vertex.
                * vertex_2:  Second vertex.
                * weight:    Weight of the edge.
                * symmetric: Whether the edge is symmetric.
            Out:
                * None.
        """
        
        # TODO
    
#####################################################################################################################################################
#####################################################################################################################################################
